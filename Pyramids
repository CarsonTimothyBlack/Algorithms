--PROBLEM--
// Write a function that accepts a positive number N.
// The function should console log a pyramid shape
// with N levels using the # character.  Make sure the
// pyramid has spaces on both the left *and* right hand sides
// --- Examples
//   pyramid(1)
//       '#'
//   pyramid(2)
//       ' # '
//       '###'
//   pyramid(3)
//       '  #  '
//       ' ### '
//       '#####'

--SOLUTION--
function pyramid(n) {
  for(let i = 0; i < n; i++) {
    let stair = "";
    for(let j = 1; j <= (n*2) - 1; j++) {
      if(j >= n - i && j <= n + i) {
        stair += "#";
      } else {
        stair += " ";
      }
    } console.log(stair);
  }
}


--OR--
function pyramid(n) {
  const midpoint = Math.floor((2 * n - 1)/2);
  for(let i = 0; i < n; i++) {
    let stair = "";
    for(let j = 0; j < 2 * n - 1; j++) {
      if(midpoint - i <= j && midpoint + i >= j) {
        stair += "#";
      } else {
        stair += " ";
      }
    } console.log(stair);
  }
}

--RECURSIVE SOLUTION--
function pyramid(n, row = 0, stair = '') {
 if(n === row) {
   return;
 }
 if(n*2 - 1 === stair.length) {
   console.log(stair);
   return pyramid(n, row + 1);
 }
 if(stair.length + 1 >= n - row && stair.length + 1 <= n + row) {
   stair += "#";
 } else {
   stair += " ";
 }
 return pyramid(n, row, stair);
}

--OR(RECURSIVE)--
function pyramid(n, row = 0, stair = '') {
 if(n === row) {
   return;
 }
 if(n*2 - 1 === stair.length) {
   console.log(stair);
   return pyramid(n, row + 1);
 }
 const midpoint = Math.floor((2 * n - 1)/2);
 if(midpoint - row <= stair.length && midpoint + row >= stair.length) {
   stair += "#";
 } else {
   stair += " ";
 }
 return pyramid(n, row, stair);
}
